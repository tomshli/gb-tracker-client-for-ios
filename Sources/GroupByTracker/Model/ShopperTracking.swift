// This file was generated from JSON Schema using quicktype, do not modify it directly.
// To parse the JSON, add this file to your project and do:
//
//   let shopperTracking = try ShopperTracking(json)
//
// Hashable or Equatable:
// The compiler will not be able to synthesize the implementation of Hashable or Equatable
// for types that require the use of JSONAny, nor will the implementation of Hashable be
// synthesized for types that have collections (such as arrays or dictionaries).

import Foundation

/// The data used to anonymously track a shopper. See property descriptions for details on
/// how this is anonymous tracking as opposed to tracking that infringes on the privacy of
/// the shopper.
// MARK: - ShopperTracking
struct ShopperTracking: Codable, Hashable {
    /// Data about the shopper's logged in/logged out status.
    public var login: Login
    /// The shopper's visitor ID, which uniquely identifies their client (ex. their web browser
    /// or their install of a native app). It should expire one year after the most recent
    /// activity from the shopper on that particular client. To ensure the shopper isn't tracked
    /// across the internet, this cannot be a value generated by another party that may identify
    /// the shopper across the entire internet. For example, it cannot be an ID generated by an
    /// analytics vendor such as Google Analytics. This ID can be generated and expired at the
    /// appropriate time by code written by the GroupBy customer, or a GroupBy SDK can be used to
    /// send requests to the API using this schema, in which case details related to generating
    /// and expiring the value are taken care of for the GroupBy customer.
    public var visitorID: String

    enum CodingKeys: String, CodingKey {
        case login
        case visitorID = "visitorId"
    }

    public init(login: Login, visitorID: String) {
        self.login = login
        self.visitorID = visitorID
    }
    
    init() {
        self.login = Login()
        self.visitorID = ""
    }
}

// MARK: ShopperTracking convenience initializers and mutators

extension ShopperTracking {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(ShopperTracking.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        login: Login? = nil,
        visitorID: String? = nil
    ) -> ShopperTracking {
        return ShopperTracking(
            login: login ?? self.login,
            visitorID: visitorID ?? self.visitorID
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}
